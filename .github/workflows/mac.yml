name: MacOS.

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-mac.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/mac.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/configure.bat'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '!docs/building-mac.md'
      - 'changelog.txt'
      - 'LEGAL'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/mac.yml'
      - 'lib/xdg/**'
      - 'snap/**'
      - 'Telegram/build/docker/**'
      - 'Telegram/Resources/uwp/**'
      - 'Telegram/Resources/winrc/**'
      - 'Telegram/SourceFiles/platform/win/**'
      - 'Telegram/SourceFiles/platform/linux/**'
      - 'Telegram/configure.bat'

jobs:

  macos:
    name: MacOS
    runs-on: macos-latest

    strategy:
      matrix:
        defines:
          - ""
    env:
      UPLOAD_ARTIFACT: "true"
      ONLY_CACHE: "false"
      ARTIFACT_NAME: "Mac-PTelegram"

    steps:
      - name: Get repository name.
        run: echo "REPO_NAME=${GITHUB_REPOSITORY##*/}" >> $GITHUB_ENV

      - name: Clone.
        uses: actions/checkout@v2
        with:
          submodules: recursive
          path: ${{ env.REPO_NAME }}

      - name: First set up.
        run: |
          sudo chown -R `whoami`:admin /usr/local/share
          brew install automake fdk-aac lame libass libtool libvorbis libvpx \
          ninja opus sdl shtool texi2html theora x264 xvid yasm pkg-config

          # Disable spotlight.
          sudo mdutil -a -i off

          sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: ThirdParty cache.
        id: cache-third-party
        uses: actions/cache@v2
        with:
          path: ThirdParty
          key: ${{ runner.OS }}-third-party

      - name: Libraries cache.
        id: cache-libs
        uses: actions/cache@v2
        with:
          path: Libraries
          key: ${{ runner.OS }}-libs

      - name: Libraries.
        run: |
          ./$REPO_NAME/Telegram/build/prepare/mac.sh silent skip-qt5 build-qt6

      - name: Telegram Desktop build.
        if: env.ONLY_CACHE == 'false'
        run: |
          cd $REPO_NAME/Telegram

          DEFINE=""
          if [ -n "${{ matrix.defines }}" ]; then
            DEFINE="-D ${{ matrix.defines }}=ON"
            echo Define from matrix: $DEFINE
            echo "ARTIFACT_NAME=Telegram_${{ matrix.defines }}" >> $GITHUB_ENV
          else
            echo "ARTIFACT_NAME=Telegram" >> $GITHUB_ENV
          fi

          ./configure.sh \
          -D CMAKE_C_FLAGS="-Werror" \
          -D CMAKE_CXX_FLAGS="-Werror" \
          -D TDESKTOP_API_TEST=OFF \
          -D TDESKTOP_API_ID=${{ secrets.API_ID }} \
          -D TDESKTOP_API_HASH=${{ secrets.API_HASH }} \
          -D DESKTOP_APP_USE_PACKAGED=OFF \
          -D DESKTOP_APP_DISABLE_CRASH_REPORTS=OFF \
          $DEFINE

          cd ../out

          xcoderun='xcodebuild build -project Telegram.xcodeproj -scheme Telegram -destination "platform=macOS,arch=x86_64" -configuration Release'
          bash -c "$xcoderun" || bash -c "$xcoderun" || bash -c "$xcoderun"

      - name: Move artifact.
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          cd $REPO_NAME/out/Release
          mkdir artifact
          lipo -thin "x86_64" Telegram.app/Contents/MacOS/Telegram -output Telegram.app/Contents/MacOS/Telegram
          lipo -thin "x86_64" Telegram.app/Contents/Frameworks/Updater -output Telegram.app/Contents/Frameworks/Updater
          lipo -thin "x86_64" Telegram.app/Contents/Helpers/crashpad_handler -output Telegram.app/Contents/Helpers/crashpad_handler

          strip "Telegram.app/Contents/MacOS/Telegram"
          strip "Telegram.app/Contents/Frameworks/Updater"
          strip "Telegram.app/Contents/Helpers/crashpad_handler"

          bless --folder "./Telegram.app/" --openfolder "./Telegram.app/"
          
          zip -r Telegram.app.zip Telegram.app

          mv Telegram.app.zip artifact/
      - uses: actions/upload-artifact@master
        if: env.UPLOAD_ARTIFACT == 'true'
        name: Upload artifact.
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.REPO_NAME }}/out/Release/artifact/
